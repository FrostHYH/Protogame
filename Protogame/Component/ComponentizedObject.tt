<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;

namespace Protogame
{
	public class ComponentizedObject
	{
		private List<object> _registeredComponents = new List<object>(); 
	
<#
	for (var i = 0; i < 16; i++)
	{
		var typeArguments = string.Empty;
		var typeArgumentsAppended = string.Empty;
		var typeConstraints = "where T : class";
		var typeParameters = string.Empty;
		var typeParametersAppended = string.Empty;
		var typeParametersPassed = string.Empty;
		if (i > 0)
		{
			typeArguments = "<" + Enumerable.Range(1, i).Select(x => "T" + x).Aggregate((a, b) => a + ", " + b) + ">";
			typeArgumentsAppended = Enumerable.Range(1, i).Select(x => ", T" + x).Aggregate((a, b) => a + b);
			typeParameters = Enumerable.Range(1, i).Select(x => "T" + x + " arg" + x).Aggregate((a, b) => a + ", " + b);
			typeParametersAppended = Enumerable.Range(1, i).Select(x => ", T" + x + " arg" + x).Aggregate((a, b) => a + b);
			typeParametersPassed = Enumerable.Range(1, i).Select(x => ", arg" + x).Aggregate((a, b) => a + b);
		}
#>
		private class ImplementedComponentCallable<T<#=typeArgumentsAppended#>> : IComponentCallable<#=typeArguments#> <#=typeConstraints#>
		{
			private readonly ComponentizedObject _target;
			private readonly Action<T<#=typeArgumentsAppended#>> _method;

			public ImplementedComponentCallable(ComponentizedObject target, Action<T<#=typeArgumentsAppended#>> method)
			{
				_target = target;
				_method = method;
			}

			public void Invoke(<#=typeParameters#>)
			{
				_target.InvokeCallableOnComponents<T<#=typeArgumentsAppended#>>(_method<#=typeParametersPassed#>);
			}
		}

		protected IComponentCallable<#=typeArguments#> RegisterCallable<T<#=typeArgumentsAppended#>>(Action<T<#=typeArgumentsAppended#>> method) <#=typeConstraints#>
		{
			return new ImplementedComponentCallable<T<#=typeArgumentsAppended#>>(this, method);
		}

		private void InvokeCallableOnComponents<T<#=typeArgumentsAppended#>>(Action<T<#=typeArgumentsAppended#>> method<#=typeParametersAppended#>) <#=typeConstraints#>
		{
			foreach (var component in _registeredComponents)
			{
				var targetable = component as T;
				if (targetable != null)
				{
					method(targetable<#=typeParametersPassed#>);
				}
			}
		}

<#
	}
#>
		protected void RegisterComponent(object component)
		{
			_registeredComponents.Add(component);
		}
	}
}